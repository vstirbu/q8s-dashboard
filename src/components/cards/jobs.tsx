/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/drRf8tiWGKG
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import * as k8s from "@kubernetes/client-node";
import {
  CardTitle,
  CardHeader,
  CardContent,
  Card,
  CardDescription,
} from "@/components/ui/card";
import { Package, Trash } from "lucide-react";
import { Button } from "@/components/ui/button";
import { deleteJob } from "@/lib/k8s";
import { revalidatePath } from "next/cache";
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "../ui/dialog";

export default function JobsList({ jobs }: { jobs: k8s.V1Job[] }) {
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Jupyter</CardTitle>
        <CardDescription>
          The jobs that you have run in the Jupyter notebook.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {jobs.map((job) => (
            <JobDetails job={job} key={job.metadata?.name} />
          ))}
          {/* <div className="flex items-center justify-between border-b pb-4">
            <div className="flex items-center gap-2">
              <CircleCheckIcon className="h-5 w-5 text-green-500" />
              <div>
                <h4 className="font-medium">backup-database</h4>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  Completed
                </p>
              </div>
            </div>
            <div className="text-sm text-gray-500 dark:text-gray-400">
              <p>2m 34s</p>
              <p>2:15 PM</p>
            </div>
          </div>
          <div className="flex items-center justify-between border-b pb-4">
            <div className="flex items-center gap-2">
              <CircleXIcon className="h-5 w-5 text-red-500" />
              <div>
                <h4 className="font-medium">update-config</h4>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  Failed
                </p>
              </div>
            </div>
            <div className="text-sm text-gray-500 dark:text-gray-400">
              <p>1m 12s</p>
              <p>3:45 PM</p>
            </div>
          </div>
          <div className="flex items-center justify-between border-b pb-4">
            <div className="flex items-center gap-2">
              <ClockIcon className="h-5 w-5 text-yellow-500" />
              <div>
                <h4 className="font-medium">migrate-data</h4>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  Pending
                </p>
              </div>
            </div>
            <div className="text-sm text-gray-500 dark:text-gray-400">
              <p>-</p>
              <p>4:30 PM</p>
            </div>
          </div>
          <div className="flex items-center justify-between border-b pb-4">
            <div className="flex items-center gap-2">
              <CheckIcon className="h-5 w-5 text-green-500" />
              <div>
                <h4 className="font-medium">generate-reports</h4>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  Succeeded
                </p>
              </div>
            </div>
            <div className="text-sm text-gray-500 dark:text-gray-400">
              <p>5m 22s</p>
              <p>9:00 AM</p>
            </div>
          </div>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <CircleCheckIcon className="h-5 w-5 text-green-500" />
              <div>
                <h4 className="font-medium">cleanup-logs</h4>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  Completed
                </p>
              </div>
            </div>
            <div className="text-sm text-gray-500 dark:text-gray-400">
              <p>3m 45s</p>
              <p>11:30 AM</p>
            </div>
          </div> */}
        </div>
      </CardContent>
    </Card>
  );
}

const getJobStatus = ({ status, spec }: k8s.V1Job) => {
  if (status?.succeeded! >= spec?.completions!) return "Completed";
  if (status?.failed! >= spec?.backoffLimit!) return "Failed";
  if (
    status?.conditions &&
    status.conditions.find(
      (cond) => cond.type === "Failed" && cond.reason === "DeadlineExceeded"
    )
  ) {
    return "DeadlineExceeded";
  }

  if (status?.active && !status.conditions) return "Pending";

  if (status?.active) return "Running";
  return "Unknown";
};

function JobDetails({ job }: { job: k8s.V1Job }) {
  console.log(job);

  const status = getJobStatus(job);

  return (
    <div className="flex items-center justify-between border-b last:border-b-0 pb-4">
      <div className="flex items-center gap-2">
        <Package className="h-5 w-5 text-yellow-500" />
        <div>
          <h4 className="font-medium">{job.metadata?.name}</h4>
          <p className="text-sm text-gray-500 dark:text-gray-400">{status}</p>
        </div>
      </div>
      <div className="flex flex-grow"></div>
      <Dialog>
        <DialogTrigger asChild>
          <Button
            size="icon"
            className="h-8 w-8 mr-8"
            variant="destructive"
            disabled={status !== "Pending"}
          >
            <Trash className="h-4 w-4" />
            <span className="sr-only">Delete</span>
          </Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Delete Job</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this job? This action cannot be
              undone.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="flex justify-end gap-2">
            <DialogClose asChild>
              <Button type="button" variant="outline">
                Cancel
              </Button>
            </DialogClose>
            <form
              action={async () => {
                "use server";

                await deleteJob(job.metadata?.name!);

                revalidatePath("/account/jobs");
              }}
            >
              <Button type="submit" variant="destructive">
                Delete
              </Button>
            </form>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      <div className="text-sm text-gray-500 dark:text-gray-400">
        <p>-</p>
        <p>
          {job.metadata?.creationTimestamp?.toLocaleTimeString([], {
            // hour: "2-digit",
            // minute: "2-digit",
            hour: "numeric",
            minute: "numeric",
            hour12: true,
          })}
        </p>
      </div>
    </div>
  );
}

// function CheckIcon(props) {
//   return (
//     <svg
//       {...props}
//       xmlns="http://www.w3.org/2000/svg"
//       width="24"
//       height="24"
//       viewBox="0 0 24 24"
//       fill="none"
//       stroke="currentColor"
//       strokeWidth="2"
//       strokeLinecap="round"
//       strokeLinejoin="round"
//     >
//       <path d="M20 6 9 17l-5-5" />
//     </svg>
//   );
// }

// function CircleCheckIcon(props) {
//   return (
//     <svg
//       {...props}
//       xmlns="http://www.w3.org/2000/svg"
//       width="24"
//       height="24"
//       viewBox="0 0 24 24"
//       fill="none"
//       stroke="currentColor"
//       strokeWidth="2"
//       strokeLinecap="round"
//       strokeLinejoin="round"
//     >
//       <circle cx="12" cy="12" r="10" />
//       <path d="m9 12 2 2 4-4" />
//     </svg>
//   );
// }

// function CircleXIcon(props) {
//   return (
//     <svg
//       {...props}
//       xmlns="http://www.w3.org/2000/svg"
//       width="24"
//       height="24"
//       viewBox="0 0 24 24"
//       fill="none"
//       stroke="currentColor"
//       strokeWidth="2"
//       strokeLinecap="round"
//       strokeLinejoin="round"
//     >
//       <circle cx="12" cy="12" r="10" />
//       <path d="m15 9-6 6" />
//       <path d="m9 9 6 6" />
//     </svg>
//   );
// }

// function ClockIcon(props) {
//   return (
//     <svg
//       {...props}
//       xmlns="http://www.w3.org/2000/svg"
//       width="24"
//       height="24"
//       viewBox="0 0 24 24"
//       fill="none"
//       stroke="currentColor"
//       strokeWidth="2"
//       strokeLinecap="round"
//       strokeLinejoin="round"
//     >
//       <circle cx="12" cy="12" r="10" />
//       <polyline points="12 6 12 12 16 14" />
//     </svg>
//   );
// }
